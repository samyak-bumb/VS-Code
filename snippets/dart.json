// Created/Designed by Tungsten
{
	// START:
	// Awesome Flutter
	"Stateless Widget": {
		"prefix": "statelessW",
		"body": [
			"class ${1:name} extends StatelessWidget {",
			"  const ${1:name}({super.key});\n",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return Container();",
			"  }",
			"}"
		]
	},
	"Stateful Widget": {
		"prefix": "statefulW",
		"body": [
			"class ${1:name} extends StatefulWidget {",
			"  const ${1:name}({super.key});\n",
			"  @override",
			"  State<${1:index}> createState() => _${1:WidgetName}State();",
			"}\n",
			"class _${1:index}State extends State<${1:index}> {",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return Container();",
			"  }",
			"}"
		]
	},
	"Build Method": {
		"prefix": "build",
		"body": [
			"@override",
			"Widget build(BuildContext context) {",
			"  return ${0:};",
			"}"
		]
	},
	"Custom Painter ": {
		"prefix": "customPainter",
		"body": [
			"class ${0:name}Painter extends CustomPainter {\n",
			"  @override",
			"  void paint(Canvas canvas, Size size) {",
			"  }\n",
			"  @override",
			"  bool shouldRepaint(${0:name}Painter oldDelegate) => false;\n",
			"  @override",
			"  bool shouldRebuildSemantics(${0:name}Painter oldDelegate) => false;",
			"}"
		]
	},
	"Custom Clipper ": {
		"prefix": "customClipper",
		"body": [
			"class ${0:name}Clipper extends CustomClipper<Path> {\n",
			"  @override",
			"  Path getClip(Size size) {",
			"  }\n",
			"  @override",
			"  bool shouldReclip(CustomClipper<Path> oldClipper) => false;",
			"}"
		]
	},
	"InitState ": {
		"prefix": "initS",
		"body": [
			"@override",
			"void initState() {",
			"  super.initState();",
			"  ${0:}",
			"}"
		]
	},
	"Dispose": {
		"prefix": "dis",
		"body": [
			"@override",
			"void dispose() {",
			"  ${0:}",
			"  super.dispose();",
			"}"
		]
	},
	"Reassemble": {
		"prefix": "reassemble",
		"body": [
			"@override",
			"void reassemble(){",
			"  super.reassemble();",
			"  ${0:}",
			"}"
		]
	},
	"didChangeDependencies": {
		"prefix": "didChangeD",
		"body": [
			"@override",
			"void didChangeDependencies() {",
			"  super.didChangeDependencies();",
			"  ${0:}",
			"}"
		]
	},
	"didUpdateWidget": {
		"prefix": "didUpdateW",
		"body": [
			"@override",
			"void didUpdateWidget (${1:Type} ${2:oldWidget}) {",
			"  super.didUpdateWidget(${2:oldWidget});",
			"  ${0:}",
			"}"
		]
	},
	"ListView.Builder": {
		"prefix": "listViewB",
		"body": [
			"ListView.builder(",
			"  itemCount: ${1:1},",
			"  itemBuilder: (BuildContext context, int index) {",
			"    return ${2:};",
			"  },",
			"),"
		]
	},
	"ListView.Separated": {
		"prefix": "listViewS",
		"body": [
			"ListView.separated(",
			"  itemCount: ${1:1},",
			"  separatorBuilder: (BuildContext context, int index) {",
			"    return ${2:};",
			"  },",
			"  itemBuilder: (BuildContext context, int index) {",
			"    return ${3:};",
			"  },",
			"),"
		]
	},
	"GridView.Builder": {
		"prefix": "gridViewB",
		"body": [
			"GridView.builder(",
			"  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(",
			"    crossAxisCount: ${1:2},",
			"  ),",
			"  itemCount: ${2:2},",
			"  itemBuilder: (BuildContext context, int index) {",
			"    return ${3:};",
			"  },",
			"),"
		]
	},
	"GridView.Count": {
		"prefix": "gridViewC",
		"body": [
			"GridView.count(",
			"  crossAxisSpacing: ${1:1},",
			"  mainAxisSpacing: ${2:2},",
			"  crossAxisCount: ${3:2},",
			"  children: <Widget> [",
			"    ${4:}",
			"  ],",
			"),"
		]
	},
	"GridView.Extent": {
		"prefix": "gridViewE",
		"body": [
			"GridView.extent(",
			"  maxCrossAxisExtent:  ${1:2},",
			"  children: <Widget> [",
			"    ${2:}",
			"  ],",
			"),"
		]
	},
	"Custom Scroll View": {
		"prefix": "customScrollV",
		"body": [
			"CustomScrollView(",
			"  slivers: <Widget>[",
			"    ${0:}",
			"  ],",
			"),"
		]
	},
	"Stream Builder": {
		"prefix": "streamBldr",
		"body": [
			"StreamBuilder(",
			"  stream: ${1:stream},",
			"  initialData: ${2:initialData},",
			"  builder: (BuildContext context, AsyncSnapshot snapshot) {",
			"    return Container(",
			"      child: ${3:child},",
			"    );",
			"  },",
			"),"
		]
	},
	"Animated Builder": {
		"prefix": "animatedBldr",
		"body": [
			"AnimatedBuilder(",
			"  animation: ${1:animation},",
			"  child: ${2:child},",
			"  builder: (BuildContext context, Widget? child) {",
			"    return ${3:};",
			"  },",
			"),"
		]
	},
	"Stateful Builder": {
		"prefix": "statefulBldr",
		"body": [
			"StatefulBuilder(",
			"  builder: (BuildContext context, setState) {",
			"    return ${0:};",
			"  },",
			"),"
		]
	},
	"Orientation Builder": {
		"prefix": "orientationBldr",
		"body": [
			"OrientationBuilder(",
			"  builder: (BuildContext context, Orientation orientation) {",
			"    return Container(",
			"      child: ${3:child},",
			"    );",
			"  },",
			"),"
		]
	},
	"Layout Builder": {
		"prefix": "layoutBldr",
		"body": [
			"LayoutBuilder(",
			"  builder: (BuildContext context, BoxConstraints constraints) {",
			"    return ${0:};",
			"  },",
			"),"
		]
	},
	"Single Child ScrollView": {
		"prefix": "singleChildSV",
		"body": [
			"SingleChildScrollView(",
			"  controller: ${1:controller,}",
			"  child: Column(",
			"    ${0:}",
			"  ),",
			"),"
		]
	},
	"Future Builder": {
		"prefix": "futureBldr",
		"body": [
			"FutureBuilder(",
			"  future: ${1:Future},",
			"  initialData: ${2:InitialData},",
			"  builder: (BuildContext context, AsyncSnapshot snapshot) {",
			"    return ${3:};",
			"  },",
			"),"
		]
	},
	"No Such Method": {
		"prefix": "nosm",
		"body": [
			"@override",
			"dynamic noSuchMethod(Invocation invocation) {",
			"  ${1:}",
			"}"
		]
	},
	"Inherited Widget": {
		"prefix": "inheritedW",
		"body": [
			"class ${1:Name} extends InheritedWidget {",
			"  const ${1:Name}({super.key, required this.child}) : super(child: child);\n",
			"  final Widget child;\n",
			"  static ${1:Name}? of(BuildContext context) {",
			"    return context.dependOnInheritedWidgetOfExactType<${1:Name}>();",
			"  }\n",
			"  @override",
			"  bool updateShouldNotify(${1:Name} oldWidget) {",
			"    return ${2:true};",
			"  }",
			"}"
		]
	},
	"Mounted": {
		"prefix": "mounted",
		"body": [
			"@override",
			"bool get mounted {",
			"  ${0:}",
			"}"
		]
	},
	"Sink": {
		"prefix": "snk",
		"body": [
			"Sink<${1:type}> get ${2:name} => _${2:name}Controller.sink;",
			"final _${2:name}Controller = StreamController<${1:type}>();"
		]
	},
	"Stream": {
		"prefix": "strm",
		"body": [
			"Stream<${1:type}> get ${2:name} => _${2:name}Controller.stream;",
			"final _${2:name}Controller = StreamController<${1:type}>();"
		]
	},
	"Subject": {
		"prefix": "subj",
		"body": [
			"Stream<${1:type}> get ${2:name} => _${2:name}Subject.stream;",
			"final _${2:name}Subject = BehaviorSubject<${1:type}>();"
		]
	},
	"toString": {
		"prefix": "toStr",
		"body": [
			"@override",
			"String toString() => ${1:toString}"
		]
	},
	"debugPrint": {
		"prefix": "debugP",
		"body": [
			"debugPrint(${1:statement});"
		]
	},
	"Material Package": {
		"prefix": "importM",
		"body": "import 'package:flutter/material.dart';"
	},
	"Cupertino Package": {
		"prefix": "importC",
		"body": "import 'package:flutter/cupertino.dart';"
	},
	"flutter_test Package": {
		"prefix": "importFT",
		"body": "import 'package:flutter_test/flutter_test.dart';"
	},
	"app_localizations Package": {
		"prefix": "importAL",
		"body": "import 'package:flutter_gen/gen_l10n/app_localizations.dart';"
	},
	"Material App": {
		"prefix": "mateapp",
		"body": [
			"import 'package:flutter/material.dart';\n",
			"void main() => runApp(const MyApp());\n",
			"class MyApp extends StatelessWidget {",
			"  const MyApp({super.key});\n",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return MaterialApp(",
			"      title: 'Material App',",
			"      home: Scaffold(",
			"        appBar: AppBar(",
			"\t\t\t\t\ttitle: const Text('Material App Bar'),",
			"        ),",
			"        body: const Center(",
			"\t\t\t\t\tchild: Text('Hello World'),",
			"        ),",
			"      ),",
			"    );",
			"  }",
			"}"
		]
	},
	"Cupertino App": {
		"prefix": "cupeapp",
		"body": [
			"import 'package:flutter/cupertino.dart';\n",
			"void main() => runApp(const MyApp());\n",
			"class MyApp extends StatelessWidget {",
			"  const MyApp({super.key});\n",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return const CupertinoApp(",
			"      title: 'Cupertino App',",
			"      home: CupertinoPageScaffold(",
			"        navigationBar: CupertinoNavigationBar(",
			"\t\t\t\t\tmiddle: Text('Cupertino App Bar'),",
			"        ),",
			"        child: Center(",
			"\t\t\t\t\tchild: Text('Hello World'),",
			"        ),",
			"      ),",
			"    );",
			"  }",
			"}"
		]
	},
	"Tween Animation Builder": {
		"prefix": "tweenAnimationBuilder",
		"body": [
			"TweenAnimationBuilder(",
			"  duration: ${1:const Duration(),}",
			"  tween: ${2:Tween(),}",
			"  builder: (BuildContext context, ${3:dynamic} value, Widget? child) {",
			"    return ${4:Container();}",
			"  },",
			"),"
		]
	},
	"Value Listenable Builder": {
		"prefix": "valueListenableBuilder",
		"body": [
			"ValueListenableBuilder(",
			"  valueListenable: ${1: null},",
			"  builder: (BuildContext context, ${2:dynamic} value, Widget? child) {",
			"    return ${3: Container();}",
			"  },",
			"),"
		]
	},
	"Test": {
		"prefix": "f-test",
		"body": [
			"test(",
			"  \"${1:test description}\",",
			"  () {},",
			");"
		]
	},
	"Group": {
		"prefix": "f-group",
		"body": [
			"group(",
			"  \"${1:group description}\",",
			"  () {},",
			");"
		]
	},
	"Test Widgets": {
		"prefix": "f-testWidgets",
		"body": [
			"testWidgets(",
			"  \"${1:test description}\",",
			"  (WidgetTester tester) async {},",
			");"
		]
	},
	// END:
	// Flutter Widget
	"Stateless widget snippet": {
		"prefix": "fstless",
		"body": [
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends StatelessWidget {",
			"const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({ Key? key }) : super(key: key);\n",
			"  @override",
			"  Widget build(BuildContext context){",
			"    return ${2:Container}(${0});",
			"  }",
			"}"
		]
	},
	"Stateful widget snippet": {
		"prefix": "fstful",
		"body": [
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends StatefulWidget {",
			"  const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({ Key? key }) : super(key: key);\n",
			"  @override",
			"  _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}State createState() => _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}State();",
			"}\n",
			"class _${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}State extends State<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}> {",
			"  @override",
			"  Widget build(BuildContext context) {",
			"    return Container(",
			"      $2",
			"    );",
			"  }",
			"}"
		]
	},
	"Scaffold widget snippet": {
		"prefix": "fscaff",
		"body": [
			"Scaffold(",
			"  appBar: AppBar(",
			"    title: ${1:const} Text('${2:Title}'),",
			"  ),",
			"  body: ${3:Container()},",
			")${3:;}"
		]
	},
	"EdgeInsets widget snippet with named constructor `all`": {
		"prefix": "fedgall",
		"body": [
			"EdgeInsets.all(${1:32.0})${0}"
		]
	},
	"Text widget snippet": {
		"prefix": "ftxt",
		"body": [
			"${1:const} Text('${2:text}')${0}"
		]
	},
	"Dart Public Instance variable snippet": {
		"prefix": "dinvar",
		"body": [
			"${1:dynamic} ${2:variableName}${0}"
		]
	},
	"Dart Private instance variable snippet": {
		"prefix": "dprinvar",
		"body": [
			"${1:dynamic} _${2:variableName};${0}"
		]
	},
	"Flutter initState lifecycle method snippet": {
		"prefix": "finitlf",
		"body": [
			"@override",
			"void initState() {",
			"  super.initState();",
			"  ${0}",
			"}"
		]
	},
	"Dart private method snippet": {
		"prefix": "dprmt",
		"body": [
			"${1:void} _${2:methodName}(${3}) ${4}{",
			"  ${0}",
			"}"
		]
	},
	"Dart optional named parameters constructor snippet": {
		"prefix": "dopnctor",
		"body": [
			"${1:constructorName}({${2}});${0}"
		]
	},
	"Flutter Icon widget snippet": {
		"prefix": "fic",
		"body": [
			"Icon(Icons.${1:clear})${0}"
		]
	},
	"Flutter Container widget snippet": {
		"prefix": "fcont",
		"body": [
			"Container(",
			"  child: ${1:Widget}(${0}),",
			")"
		]
	},
	"Flutter Center widget snippet": {
		"prefix": "fcent",
		"body": [
			"Center(",
			"  child: ${1:Widget}(${0}),",
			")"
		]
	},
	"Flutter Row widget snippet": {
		"prefix": "frow",
		"body": [
			"Row(",
			"  children: <Widget>[${0}],",
			")"
		]
	},
	"Flutter Column widget snippet": {
		"prefix": "fcol",
		"body": [
			"Column(",
			"  children: <Widget>[${0}],",
			")"
		]
	},
	"SizedBox widget snippet with width and height arguments": {
		"prefix": "fszb",
		"body": [
			"SizedBox(width: ${1:0.0}, height: ${2:0.0})${0}"
		]
	},
	"SizedBox widget snippet with just width argument": {
		"prefix": "fszbw",
		"body": [
			"SizedBox(",
			"  width: ${1:0.0},${0}",
			")"
		]
	},
	"SizedBox widget snippet with just height argument": {
		"prefix": "fszbh",
		"body": [
			"SizedBox(",
			"  height: ${1:0.0},${0}",
			")"
		]
	},
	"Expand widget snippet": {
		"prefix": "fex",
		"body": [
			"Expanded(",
			"  child: ${1:null},${0}",
			")"
		]
	},
	"EdgeInsets widget snippet with named constructor `only`": {
		"prefix": "fedgonly",
		"body": [
			"EdgeInsets.only(${1})${0}"
		]
	},
	"EdgeInsets widget snippet with symmetric contructor `symmetric`": {
		"prefix": "fedgsym",
		"body": [
			"EdgeInsets.symmetric(vertical: ${1:8.0}, horizontal: ${2:8.0},)${0}"
		]
	},
	"EdgeInsets widget snippet with symmetric contructor `symmetric` with only vertical parameter": {
		"prefix": "fedgsymv",
		"body": [
			"EdgeInsets.symmetric(vertical: ${1:8.0},)${0}"
		]
	},
	"EdgeInsets widget snippet with symmetric contructor `symmetric` with only horizontal parameter": {
		"prefix": "fedgsymh",
		"body": [
			"EdgeInsets.symmetric(horizontal: ${1:8.0},)${0}"
		]
	},
	"Dart `List` collection snippet": {
		"prefix": "dlist",
		"body": [
			"List<${1:dynamic}> ${2:listName}${0}"
		]
	},
	"Dart `Map` collection snippet": {
		"prefix": "dmap",
		"body": [
			"Map<${1:dynamic}, ${2:dynamic}> ${3:mapName}${0}"
		]
	},
	"Dart `Set` collection snippet": {
		"prefix": "dset",
		"body": [
			"Set<${1:dynamic}> ${2:setName}${0}"
		]
	},
	"Dart arrow function getter snippet": {
		"prefix": "dgetarr",
		"body": [
			"${1:dynamic} get ${2:name} => ${3:returnValue};${0}"
		]
	},
	"Dart `import as` snippet": {
		"prefix": "dimpas",
		"body": [
			"import '${1:packageName}' as ${2:alias}${0};"
		]
	},
	"Dart `import show` snippet": {
		"prefix": "dimpshow",
		"body": [
			"import '${1:packageName}' show ${2:member}${0};"
		]
	},
	"Dart `import deffered as` snippet": {
		"prefix": "dimplazy",
		"body": [
			"import '${1:packageName}' deferred as ${2:alias}${0};"
		]
	},
	"Dart `import hide` snippet": {
		"prefix": "dimphide",
		"body": [
			"import '${1:packageName}' hide ${2:excludedMember}${0};"
		]
	},
	"Dart `export hide` snippet": {
		"prefix": "dexhide",
		"body": [
			"export '${1:file}' hide ${2:excludedMember}${0};"
		]
	},
	"Dart `export show` snippet": {
		"prefix": "dexshow",
		"body": [
			"export '${1:file}' show ${2:member}${0};"
		]
	},
	"Dart public method snippet": {
		"prefix": "dmt",
		"body": [
			"${1:void} ${2:methodName}(${3}) ${4}{",
			"  ${0}",
			"}"
		]
	},
	"Dart `convert` lib import snippet": {
		"prefix": "dconvert",
		"body": [
			"import 'dart:convert'${0};"
		]
	},
	"Dart `var` variable declaration snippet": {
		"prefix": "dvar",
		"body": [
			"${1:var} ${2:variableName}${0}"
		]
	},
	"Dart `final` variable declaration snippet": {
		"prefix": "dfinal",
		"body": [
			"final ${1:type} ${2:variableName} ${3:= }${0};"
		]
	},
	"Dart `const` variable declaration snippet": {
		"prefix": "dconst",
		"body": [
			"const ${1:type} ${2:variableName} ${3:= }${0};"
		]
	},
	"Dart public arrow function snippet": {
		"prefix": "darr",
		"body": [
			"${1:Object} ${2:methodName}(${3}) ${4}=> ${0};"
		]
	},
	"Dart private arrow function snippet": {
		"prefix": "dprarr",
		"body": [
			"${1:Object} _${2:methodName}(${3}) ${4}=> ${0};"
		]
	},
	"Add material's package import statement": {
		"prefix": "fimpmat",
		"body": [
			"import 'package:flutter/material.dart';"
		]
	},
	"Add meta package import statement": {
		"prefix": "dimpmeta",
		"body": [
			"import 'package:meta/meta.dart';"
		]
	},
	"Flutter StreamBuilder widget snippet": {
		"prefix": "fstream",
		"body": [
			"StreamBuilder<${1:dynamic}>(",
			"  stream: ${2:yourStream},",
			"  builder: (BuildContext context, AsyncSnapshot<${1:dynamic}> snapshot) {",
			"      if (snapshot.hasData) {",
			"       // TODO: do something with the data",
			"       return ${3:Container()};",
			"      } else if (snapshot.hasError) {",
			"      // TODO: do something with the error",
			"       return ${4:Text(snapshot.error.toString())};",
			"      }",
			"      // TODO: the data is not ready, show a loading indicator",
			"      return ${5:Center(child: CircularProgressIndicator())};",
			"   },",
			")"
		]
	},
	"Flutter ElevatedButton snippet": {
		"prefix": "felbtn",
		"body": [
			"ElevatedButton(",
			"  child: const Text('${1:Button label}'),",
			"  onPressed: () {},",
			")${0}"
		]
	},
	"Flutter bloc provider snippet": {
		"prefix": "fblocprov",
		"body": [
			"class ${1:Bloc}Provider extends InheritedWidget {",
			"  final ${2:BlocTypeName} bloc = ${2:BlocTypeName}();\n",
			"  ${1:Bloc}Provider({Key key, Widget child})",
			"      : super(key: key, child: child);\n",
			"  @override",
			"  bool updateShouldNotify(InheritedWidget oldWidget) => true;\n",
			"  static ${2:BlocTypeName} of(BuildContext context) {",
			"    return (context.inheritFromWidgetOfExactType(${1:Bloc}Provider)",
			"\t\t\t\t\tas ${1:Bloc}Provider)",
			"        .bloc;",
			"  }",
			"}"
		]
	},
	"Dart anonymous function": {
		"prefix": "dan",
		"body": [
			"(${1}) ${2}{${0}}"
		]
	},
	"Dart Class snippet": {
		"prefix": "dcla",
		"body": [
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} {",
			"${0}",
			"}"
		]
	},
	"Dart Class snippet with extends keyword": {
		"prefix": "dclae",
		"body": [
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends ${2} {",
			"  ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}(${0}) : super();",
			"}"
		]
	}
}
