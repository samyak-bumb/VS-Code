// Created/Written by Tungsten
{
  "HelloWorld sample": {
    "prefix": "#helloworld",
    "body": "using System;\n\nnamespace ConsoleApp\n{\n\tpublic class Program\n\t{\n\t\tpublic static void Main(string[] args)\n\t\t{\n\t\t\tConsole.WriteLine(\"Hello World!\");\n\t\t}\n\t}\n}"
  },
  "destructor for the containing class": {
    "prefix": "~",
    "body": "~${1:Program}()\n{\n\t$0\n}"
  },
  "call to Clear": {
    "prefix": "cclear",
    "body": "Console.Clear();\n$0"
  },
  "General output to console": {
    "prefix": "cgo",
    "body": "Console.WriteLine(\"Console app started\");\n\n$0\nConsole.WriteLine(\"Press any key to exit...\");\nConsole.ReadKey(true);"
  },
  "class": {
    "prefix": "class",
    "body": "public class ${1:MyClass}\n{\n\t$0\n}"
  },
  "abstract class declaration": {
    "prefix": "classa",
    "body": "public abstract class ${1:MyClass}\n{\n\t$0\n}"
  },
  "disposable class": {
    "prefix": "classd",
    "body": "public class ${1:MyClass} : IDisposable\n{\n\n\tpublic void Dispose()\n\t{\n\t\tGC.SuppressFinalize(this);\n\t}\n\n\t$0\n}"
  },
  "constant": {
    "prefix": "const",
    "body": "${1:public} const ${2:string} ${3:CONSTANT_NAME} = \"${4:value}\";\n$0"
  },
  "call to ReadLine": {
    "prefix": "cr",
    "body": "Console.ReadLine();\n$0"
  },
  "call to ReadKey": {
    "prefix": "crk",
    "body": "Console.ReadKey();\n$0"
  },
  "call to WriteLine": {
    "prefix": "cwl",
    "body": "Console.WriteLine($\"${1:Text}\");\n$0"
  },
  "do while loop": {
    "prefix": "dowhile",
    "body": "do\n{\n\t$0\n} while (${1:true})"
  },
  "else statement": {
    "prefix": "else",
    "body": "else\n{\n\t$0\n}"
  },
  "enum type": {
    "prefix": "enum",
    "body": "public enum ${1:MyEnumType}\n{\n\t$0\n}"
  },
  "exception class": {
    "prefix": "exception",
    "body": "public class ${1:MyException} : System.Exception\n}\n\tpublic $1() {}\n\tpublic $1(string message) : base(message) {}\n\tpublic $1(string message, System.Exception inner) : base(message, inner) {}\n\tpublic $1(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context) {}\n}"
  },
  "for loop": {
    "prefix": "for",
    "body": "for (var ${1:i} = 0; $1 < ${2:length}; $1++)\n{\n\t$0\n}"
  },
  "foreach statement": {
    "prefix": "foreach",
    "body": "foreach (var ${1:item} in ${2:collection})\n{\n\t$0\n}"
  },
  "new instance of the Guid structure": {
    "prefix": "guid",
    "body": "Guid ${1:guid} = Guid.NewGuid();\n$0"
  },
  " string, a new instance of the Guid structure without hyphens": {
    "prefix": "guidn",
    "body": "string ${1:guid} = Guid.NewGuid().ToString(\"N\");\n$0"
  },
  "if statement": {
    "prefix": "if",
    "body": "if (${1:true})\n{\n\t$0\n}"
  },
  "if else statement": {
    "prefix": "ifelse",
    "body": "if (${1:true})\n{\n\t$0\n}\nelse\n{\n\t\n}"
  },
  "conditional operator": {
    "prefix": "iif",
    "body": "var ${1:value} = ${2:true};\nvar ${3:result} = (${1} ? ${4:true} : ${5:false});\n$0"
  },
  "immutable object": {
    "prefix": "immutable",
    "body": "${1:public} class ${2:ImmutableObject}\n{\n\tprivate readonly ${3:string} ${4:_name};\n\tpublic $3 ${5:Name} => $4\n\n\tpublic $2($3 ${6:name})\n\t{\n\t\t$4 = $6;\n\t}\n}"
  },
  "interface": {
    "prefix": "interface",
    "body": "public interface I${1:MyInterface}\n{\n\t$0\n}"
  },
  "LINQ Distinct sentence": {
    "prefix": "linq_distinct",
    "body": "${1:var} ${2:data} = (from ${3:item} in ${4:collection}\n\t\t\tselect $3).Distinct()"
  },
  "LINQ Where sentence": {
    "prefix": "linq_where",
    "body": "${1:var} ${2:data} = from ${3:item} in ${4:collection}\n\t\t\twhere $3.${5:FieldName}.${6:Contains}(\"${7:Text}\")\n\t\t\tselect $3;"
  },
  "lock statement": {
    "prefix": "lock",
    "body": "lock (${1:true})\n{\n\t$0\n}"
  },
  "Console Main structure": {
    "prefix": "main",
    "body": "public static void Main(string[] args)\n{\n\t$0\n}"
  },
  "Method structure": {
    "prefix": "method",
    "body": "${1:public} ${2:void} ${3:MyMethod}(${4:string} ${5:parameter})\n{\n\t$0\n}"
  },
  "Async Method structure": {
    "prefix": "method_async",
    "body": "${1:public} async ${2:Task}<${3:object}> ${4:MyMethodAsync}(${5:string} ${6:parameter})\n{\n\t$0\n}"
  },
  "Windows Message Box": {
    "prefix": "msgbox",
    "body": "System.Windows.Forms.MessageBox.Show(\"${1:Hello}\");\n$0"
  },
  "Namespace": {
    "prefix": "namespace",
    "body": "namespace ${1:MyNamespace}\n{\n\t$0\n}"
  },
  "property": {
    "prefix": "prop",
    "body": "${1:public} ${2:string} ${3:Name} { get; set; }\n\n$0"
  },
  "immutable property": {
    "prefix": "propi",
    "body": "private readonly ${1:string} ${2:_name};\n\npublic $1 ${3:Name} => $2;\n$0"
  },
  "init property": {
    "prefix": "propinit",
    "body": "public ${1:string} ${2:Name} { get; init; }\n\n$0"
  },
  "property read-only": {
    "prefix": "propr",
    "body": "public ${1:string} ${2:Name} { get; private set; }\n\n$0"
  },
  "public string": {
    "prefix": "pum",
    "body": "public ${1:string} ${2:Method}(${3:string} ${4:parameter})\n{\n\t$0\n\treturn System.NotImplementedException;\n}"
  },
  "public void": {
    "prefix": "pvm",
    "body": "public void ${1:Method}(${2:string} ${3:parameter})\n{\n\t$0\n}"
  },
  "record type": {
    "prefix": "record",
    "body": "public record Person(${1:string} ${2:Name});"
  },
  "record type with deconstructor": {
    "prefix": "recordd",
    "body": "public record Person\n{\n\tpublic Person(${1:string} ${2:name}, ${3:int} ${4:age}) => (${5:Name}, ${6:Age}) = ($2, $4);\n\n\tpublic $1 $5 { get; set; }\n\tpublic $3 $6 { get; set; }\n\npublic void Deconstructor(out $1 $2, out $3 $4) => ($2, $4) = ($5, $6);\n}"
  },
  "singleton class": {
    "prefix": "singleton",
    "body": "public sealed class ${1:MyClass}\n{\n\tprivate static volatile I${2:MyObject} instance;\n\tprivate static Object syncRootObject = new Object();\n\n\tpublic static I${2} Instance\n\t\n{\t\tget\n\t\t{\n\t\t\tif (instance == null)\n\t\t\t{\n\t\t\t\tlock (syncRootObject)\n\t\t\t\t{\n\t\t\t\t\tif (instance == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tinstance = new $0${3:MyObject}();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn instance;\n\t\t}\n\t}\n}"
  },
  "singleton class with System.Lazy<T>": {
    "prefix": "singletonl",
    "body": "public sealed class ${1:MyClass} : I${2:MyObject}\n{\n\tprivate static readonly Lazy<I${2}> _instance = new Lazy<I${2}>(() => new ${1}());\n\n\tpublic static I${2} Instance { get { return _instance.Value; } }\n\t\n\tprivate ${1}()\n\t{\n\t}\n}"
  },
  "singleton class as thread-safe without using locks": {
    "prefix": "singletonts",
    "body": "public sealed class ${1:MyClass} : I${2:MyObject}\n{\n\tprivate static readonly I${2} _instance = new ${1}();\n\tstatic ${1}() {}\n\tprivate ${1}() {}\n\tpublic static I${2} Instance { get { return _instance; } }\n\t\n}"
  },
  "struct": {
    "prefix": "struct",
    "body": "public struct ${1:MyStruct}\n{\n\t$0\n}"
  },
  "switch statement": {
    "prefix": "switch",
    "body": "switch (${1:value})\n{\n\tcase ${2:value1}:\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n}\n"
  },
  "C# 9 top-level statement": {
    "prefix": "tls",
    "body": "System.Console.WriteLine(\"${1:Hello World!}\");"
  },
  "TODO comment": {
    "prefix": "todo",
    "body": "// TODO: $0"
  },
  "try catch": {
    "prefix": "try",
    "body": "try\n{\n\t$0\n}\ncatch (${1:System.Exception} ex)\n{\n\t // TODO\n}"
  },
  "try catch finally": {
    "prefix": "tryf",
    "body": [
      "try\n{",
      "\t$0\n}",
      "catch (${1:System.Exception} ex)\n{",
      "\t // TODO\n}",
      "finally\n{",
      "\t\n}"
    ]
  },
  "using": {
    "prefix": "using",
    "body": "using ${1:System}$0;"
  },
  "while loop": {
    "prefix": "while",
    "body": "while (${1:true})\n{\n\t$0\n}"
  },
  "csproj Generator for .NET Core 1.0": {
    "prefix": "csproj_1.0",
    "body": [
      "<Project Sdk=\"Microsoft.NET.Sdk\">",
      "\t<PropertyGroup>",
      "\t\t<OutputType>Exe</OutputType>",
      "\t\t<TargetFramework>netcoreapp1.0</TargetFramework>",
      "\t</PropertyGroup>\n</Project>"
    ]
  },
  "csproj Generator for .NET Core 1.1": {
    "prefix": "csproj_1.1",
    "body": [
      "<Project Sdk=\"Microsoft.NET.Sdk\">",
      "\t<PropertyGroup>",
      "\t\t<OutputType>Exe</OutputType>",
      "\t\t<TargetFramework>netcoreapp1.1</TargetFramework>",
      "\t</PropertyGroup>\n</Project>"
    ]
  },
  "csproj Generator for .NET Core 2.0": {
    "prefix": "csproj_2.0",
    "body": [
      "<Project Sdk=\"Microsoft.NET.Sdk\">",
      "\t<PropertyGroup>",
      "\t\t<OutputType>Exe</OutputType>",
      "\t\t<TargetFramework>netcoreapp2.0</TargetFramework>",
      "\t</PropertyGroup>\n</Project>"
    ]
  },
  "csproj Generator for .NET Core 3.1": {
    "prefix": "csproj_3.1",
    "body": [
      "<Project Sdk=\"Microsoft.NET.Sdk\">",
      "\t<PropertyGroup>",
      "\t\t<OutputType>Exe</OutputType>",
      "\t\t<TargetFramework>netcoreapp3.1</TargetFramework>",
      "\t</PropertyGroup>\n</Project>"
    ]
  },
  "csproj Generator for .NET 5": {
    "prefix": "csproj_5",
    "body": [
      "<Project Sdk=\"Microsoft.NET.Sdk\">",
      "\t<PropertyGroup>",
      "\t\t<OutputType>Exe</OutputType>",
      "\t\t<TargetFramework>net5.0</TargetFramework>",
      "\t</PropertyGroup>\n</Project>"
    ]
  },
  "sln Generator for Visual Studio 2017 (.NET Core and ASP.NET Core)": {
    "prefix": "sln_2017",
    "body": "Microsoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio 15\nVisualStudioVersion = 15.0.26124.0\nMinimumVisualStudioVersion = 15.0.26124.0\nProject(\"{${1:FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}}\") = \"${2:SolutionName}\", \"$2\\\\${3:ProjectName}.csproj\", \"{${4:3E6CAA7F-C72A-428D-91C8-74ADBD56D3CA}}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tDebug|x64 = Debug|x64\n\t\tDebug|x86 = Debug|x86\n\t\tRelease|Any CPU = Release|Any CPU\n\t\tRelease|x64 = Release|x64\n\t\tRelease|x86 = Release|x86\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\nEndGlobal"
  },
  "sln Generator for Visual Studio 2019 (.NET Core and ASP.NET Core)": {
    "prefix": "sln_2019",
    "body": [
      "Microsoft Visual Studio Solution File, Format Version 12.00",
      "# Visual Studio Version 16",
      "VisualStudioVersion = 16.0.30711.63",
      "MinimumVisualStudioVersion = 10.0.40219.1",
      "Project(\"{${1:FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}}\") = \"${2:SolutionName}\", \"$2\\\\${3:ProjectName}.csproj\", \"{${4:3E6CAA7F-C72A-428D-91C8-74ADBD56D3CA}}\"",
      "EndProject",
      "Global",
      "\tGlobalSection(SolutionConfigurationPlatforms) = preSolution",
      "\t\tDebug|Any CPU = Debug|Any CPU",
      "\t\tDebug|x64 = Debug|x64",
      "\t\tDebug|x86 = Debug|x86",
      "\t\tRelease|Any CPU = Release|Any CPU",
      "\t\tRelease|x64 = Release|x64",
      "\t\tRelease|x86 = Release|x86",
      "\tEndGlobalSection",
      "\tGlobalSection(SolutionProperties) = preSolution",
      "\t\tHideSolutionNode = FALSE",
      "\tEndGlobalSection",
      "EndGlobal"
    ]
  },
  "Xml Comment - <c> Gives you a way to indicate that text within a description should be marked as code": {
    "prefix": "xml_<c>",
    "body": "/// <c>${1:text}</c>"
  },
  "Xml Comment - <code> Gives you a way to indicate multiple lines as code. Use <c> to indicate that text within a description should be marked as code": {
    "prefix": "xml_<code>",
    "body": "/// <code>\n/// ${1:content}\n/// </code>"
  },
  "Xml Comment - <example> Lets you specify an example of how to use a method or other library member": {
    "prefix": "xml_<example>",
    "body": "/// <example>\n/// ${1:description}\n/// </example>"
  },
  "Xml Comment - <exception> Lets you specify which exceptions can be thrown": {
    "prefix": "xml_<exception>",
    "body": "/// <exception cref=\"${1:member}\">${2:description}</exception>"
  },
  "Xml Comment - <include> Lets you refer to comments in another file that describe the types and members in your source code": {
    "prefix": "xml_<include>",
    "body": "/// <include file='${1:filename}' path='${2:tagpath}[@name=\"${3:id}\"]' />"
  },
  "Xml Comment - <list> A list or table can have as many <item> blocks as needed": {
    "prefix": "xml_<list>",
    "body": [
      "/// <list type=\"bullet\">",
      "///\t<listheader>",
      "///\t\t<term>${1:term}</term>",
      "///\t\t<description>${2:description}</description>",
      "///\t</listheader>",
      "///\t<item>",
      "///\t\t<term>${3:term}</term>",
      "///\t\t<description>${4:description}</description>",
      "///\t</item>",
      "/// </list>"
    ]
  },
  "Xml Comment - <para> Is for use inside a tag, such as <summary>, <remarks>, or <returns>, and lets you add structure to the text": {
    "prefix": "xml_<para>",
    "body": "/// <para>${1:content}</para>"
  },
  "Xml Comment - <param> Should be used in the comment for a to describe one of the parameters for the method": {
    "prefix": "xml_<param>",
    "body": "/// <param name=\"${1:name}\">${2:description}</param>"
  },
  "Xml Comment - <paramref> Gives you a way to indicate that a word in the code comments, for example in a <summary> or <remarks> block refers to a parameter": {
    "prefix": "xml_<paramref>",
    "body": "/// <paramref name=\"${1:name}\"/>"
  },
  "Xml Comment - <permission> Lets you document the access of a member": {
    "prefix": "xml_<permission>",
    "body": "/// <permission cref=\"${1:member}\">${2:description}</permission>"
  },
  "Xml Comment - <remarks> Is used to add information about a type, supplementing the information specified with <summary>": {
    "prefix": "xml_<remarks>",
    "body": "/// <remarks>${1:description}</remarks>"
  },
  "Xml Comment - <returns> Should be used in the comment for a to describe the return value": {
    "prefix": "xml_<returns>",
    "body": "/// <returns>${1:description}</returns>"
  },
  "Xml Comment - <see> Lets you specify a link from within text. Use <seealso> to indicate that text should be placed in a See Also section": {
    "prefix": "xml_<see>",
    "body": "/// <see cref=\"${1:member}\"/>"
  },
  "Xml Comment - <seealso> Lets you specify the text that you might want to appear in a See Also section": {
    "prefix": "xml_<seealso>",
    "body": "/// <seealso cref=\"${1:member}\"/>"
  },
  "Xml Comment - <summary> Should be used to describe a type or a type member": {
    "prefix": "xml_<summary>",
    "body": "/// <summary>${1:description}</summary>"
  },
  "Xml Comment - <typeparam> Should be used in the comment for a generic type or to describe a type parameter": {
    "prefix": "xml_<typeparam>",
    "body": "/// <typeparam name=\"${1:name}\">${2:description}</typeparam>"
  },
  "Xml Comment - <typeparamref> Enable consumers of the documentation file to format the word in some distinct way, for example in italics": {
    "prefix": "xml_<typeparamref>",
    "body": "/// <typeparamref name=\"${1:name}\"/>"
  },
  "Xml Comment - <value> Lets you describe the value that a property represents": {
    "prefix": "xml_<value>",
    "body": "/// <value>${1:property-description}</value>"
  },
  "ASP.NET Core 2.0 csproj Generator": {
    "prefix": "ac_csproj_2.0",
    "body": [
      "<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
      "\t<PropertyGroup>",
      "\t\t<TargetFramework>netcoreapp2.0</TargetFramework>",
      "\t</PropertyGroup>",
      "\t<ItemGroup>",
      "\t\t<Folder Include=\"wwwroot\\\" />",
      "\t</ItemGroup>",
      "\t<ItemGroup>",
      "\t\t<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />",
      "\t</ItemGroup>\n</Project>"
    ]
  },
  "ASP.NET Core 2.1 csproj Generator": {
    "prefix": "ac_csproj_2.1",
    "body": [
      "<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
      "\t<PropertyGroup>",
      "\t\t<TargetFramework>netcoreapp2.1</TargetFramework>",
      "\t</PropertyGroup>",
      "\t<ItemGroup>",
      "\t\t<Folder Include=\"wwwroot\\\" />",
      "\t</ItemGroup>",
      "\t<ItemGroup>",
      "\t\t<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.1.0\" />",
      "\t</ItemGroup>\n</Project>"
    ]
  },
  "ASP.NET Core 3.1 csproj Generator": {
    "prefix": "ac_csproj_3.1",
    "body": "<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n\t<PropertyGroup>\n\t\t<TargetFramework>netcoreapp3.1</TargetFramework>\n\t</PropertyGroup>\n</Project>"
  },
  "ASP.NET 5 csproj Generator": {
    "prefix": "ac_csproj_5",
    "body": [
      "<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
      "\t<PropertyGroup>",
      "\t\t<TargetFramework>net5.0</TargetFramework>",
      "\t</PropertyGroup>\n</Project>"
    ]
  },
  "ASP.NET Core - HelloWorld sample - Startup": {
    "prefix": "ac_#helloworld_Startup",
    "body": [
      "using System;",
      "using System.Collections.Generic;",
      "using System.Linq;",
      "using System.Threading.Tasks;",
      "using Microsoft.AspNetCore.Builder;",
      "using Microsoft.AspNetCore.Hosting;",
      "using Microsoft.AspNetCore.Http;",
      "using Microsoft.Extensions.DependencyInjection;\n",
      "namespace WebApp\n{",
      "\tpublic class Startup",
      "\t{",
      "\t\tpublic void ConfigureServices(IServiceCollection services)",
      "\t\t{",
      "\t\t}\n",
      "\t\tpublic void Configure(IApplicationBuilder app, IHostingEnvironment env)",
      "\t\t{",
      "\t\t\tif (env.IsDevelopment())",
      "\t\t\t{",
      "\t\t\t\tapp.UseDeveloperExceptionPage();",
      "\t\t\t}\n",
      "\t\t\tapp.Run(async (context) =>",
      "\t\t\t{",
      "\t\t\t\tawait context.Response.WriteAsync(\"Hello World!\");",
      "\t\t\t});",
      "\t\t}\n\t}\n}"
    ]
  },
  "ASP.NET Core - HelloWorld sample - WebApp": {
    "prefix": "ac_#helloworld_WebApp",
    "body": [
      "using System;",
      "using System.Collections.Generic;",
      "using System.IO;",
      "using System.Linq;",
      "using System.Threading.Tasks;",
      "using Microsoft.AspNetCore;",
      "using Microsoft.AspNetCore.Hosting;",
      "using Microsoft.Extensions.Configuration;",
      "using Microsoft.Extensions.Logging;\n",
      "namespace WebApp\n{",
      "\tpublic class Program",
      "\t{",
      "\t\tpublic static void Main(string[] args)",
      "\t\t{",
      "\t\t\tBuildWebHost(args).Run();",
      "\t\t}\n",
      "\t\tpublic static IWebHost BuildWebHost(string[] args) =>",
      "\t\tWebHost.CreateDefaultBuilder(args)",
      "\t\t\t.UseStartup<Startup>()",
      "\t\t\t.Build();",
      "\t}\n}"
    ]
  },
  "ASP.NET Core - HelloWorld sample - WebApi": {
    "prefix": "ac_#helloworld_WebApi",
    "body": [
      "using System;",
      "using Microsoft.AspNetCore;",
      "using Microsoft.AspNetCore.Builder;",
      "using Microsoft.AspNetCore.Http;",
      "using Microsoft.AspNetCore.Routing;\n",
      "Console.WriteLine(\"http://localhost:5000/hello/test\");",
      "WebHost.Start(routes => routes.MapGet(\"hello/{name}\", (request, response, data) => response.WriteAsync($\"Hello, {data.Values[\"name\"]}\")));",
      "Console.ReadKey();"
    ]
  },
  "ASP.NET Core - MVC/Api Action": {
    "prefix": "ac_action",
    "body": "[${1:HttpGet}(nameof($2))]\npublic async Task<IActionResult> ${2:ActionName}(${3:string} ${4:name})\n{\t$0\n\treturn Ok;\n}"
  },
  "ASP.NET Core - comment block in ASP.NET": {
    "prefix": "ac_comment",
    "body": "<%-- $0 -->"
  },
  "ASP.NET Core - way to configure the JSON configuration provider": {
    "prefix": "ac_conf",
    "body": [
      "// Remember imports: using Microsoft.Extensions.Configuration;",
      "public IConfiguration Configuration { get; set; }\n",
      "public Startup(IConfiguration configuration)\n{\n\tConfiguration = configuration;\n}"
    ]
  },
  "ASP.NET Core - way to configure the JSON configuration provider with a custom config file": {
    "prefix": "ac_conf_file",
    "body": [
      "var builder = new ConfigurationBuilder()",
      ".SetBasePath(env.ContentRootPath)",
      ".AddJsonFile(\"${1:mySettings}.json\", optional: true, reloadOnChange: true);\n",
      "// Remember to create the property",
      "// public IConfiguration Configuration { get; set; }",
      "Configuration = builder.Build();"
    ]
  },
  "ASP.NET Core - base of a controller": {
    "prefix": "ac_controller",
    "body": [
      "namespace ${1:Name}.Controllers",
      "{\n",
      "\tusing Microsoft.AspNetCore.Mvc;\n",
      "\tpublic class ${2:Name}Controller : Controller",
      "\t{",
      "\t\tpublic IActionResult Index()",
      "\t\t{",
      "\t\t\treturn View();",
      "\t\t}\n",
      "\t\tpublic IActionResult ${3:Welcome}()",
      "\t\t{",
      "\t\t\tViewData[\"Message\"] = \"Your welcome message\";\n",
      "\t\t\treturn View();",
      "\t\t}\n\t}\n}"
    ]
  },
  "ASP.NET Core - Startup constructor to be used with the web hosting environment": {
    "prefix": "ac_startupenv",
    "body": [
      "public Startup(IHostingEnvironment env)\n{",
      "\tvar builder = new ConfigurationBuilder()",
      "\t\t.SetBasePath(env.ContentRootPath)",
      "\t\t.AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true)",
      "\t\t.AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)",
      "\t\t.AddEnvironmentVariables();\n",
      "\tConfiguration = builder.Build();\n}"
    ]
  },
  "ASP.NET Core Web Api - base of a controller": {
    "prefix": "api_controller",
    "body": [
      "namespace ${1:Name}.Controllers\n{\n",
      "\tusing Microsoft.AspNetCore.Mvc;\n",
      "\t[Route(\"api/[controller]\")]",
      "\t[ApiController]",
      "\tpublic class ${2:Name}Controller : ControllerBase\n\t{",
      "\t\t[HttpGet]",
      "\t\tpublic async Task<IActionResult> Get()",
      "\t\t{",
      "\t\t\t$0",
      "\t\t\treturn Ok();",
      "\t\t}\n\t}\n}"
    ]
  },
  "ASP.NET Core Web Api - Delete Action of the WebApi": {
    "prefix": "api_delete",
    "body": "[HttpDelete(\"{${1:value}\\}\")]\npublic async Task ${2:DeleteAsync}(${3:string} $1)\n{\n\t$0\n}"
  },
  "ASP.NET Core Web Api - Get Action of the WebApi": {
    "prefix": "api_get",
    "body": "[HttpGet(\"{${1:value}\\}\")]\npublic async Task<ActionResult<${2:string}>> ${3:GetAsync}(${4:string} $1)\n{\n\t$0\n}"
  },
  "ASP.NET Core Web Api - Put Action of the WebApi": {
    "prefix": "api_put",
    "body": "[HttpPut(\"{${1:value}\\}\")]\npublic async Task ${2:PutAsync}(${3:string} $1)\n{\n\t$0\n}"
  },
  "ASP.NET Core Web Api - Post Action of the WebApi": {
    "prefix": "api_post",
    "body": "[HttpPost(\"{${1:value}\\}\")]\npublic async Task ${2:PostAsync}([FromBody] ${3:string} $1)\n{\n\t$0\n}"
  },
  "ASP.NET Core Razor - code block for Razor": {
    "prefix": "rz_code",
    "body": "@code {\n\t$0\n}"
  },
  "ASP.NET Core Razor - comment block for Razor": {
    "prefix": "rz_comment",
    "body": "@* $0 *@"
  },
  "ASP.NET Core Razor - directive block for Razor": {
    "prefix": "rz_directive",
    "body": "@{\n\t$0\n}"
  },
  "ASP.NET Core Razor - ": {
    "prefix": "rz_dowhile",
    "body": "@{ var ${1:flag} = ${2:true}; }\n@do\n{\n\t$0\n} while ($1)"
  },
  "ASP.NET Core Razor - for statement for Razor": {
    "prefix": "rz_for",
    "body": "@for (var ${1:i} = 0; $1 < ${2:length}; $1++)\n{\n\t$0\n}"
  },
  "ASP.NET Core Razor - foreach statement for Razor": {
    "prefix": "rz_foreach",
    "body": [
      "@foreach (var ${1:person} in ${2:people})\n{",
      "\t<${3:p}>${4:Name}: @$1.$4</$3>",
      "\t$0\n}"
    ]
  },
  "ASP.NET Core Razor - functions block for Razor": {
    "prefix": "rz_functions",
    "body": "@functions {\n\t$0\n}"
  },
  "ASP.NET Core Razor - if statement for Razor": {
    "prefix": "rz_if",
    "body": "@if (${1:true})\n{\n\t$0\n}"
  },
  "ASP.NET Core Razor - if else statement for Razor": {
    "prefix": "rz_ifelse",
    "body": "@if (${1:true})\n{\n\t$0\n}\nelse\n{\n\t$2\n}"
  },
  "ASP.NET Core Razor - Implements an interface for Razor": {
    "prefix": "rz_implements",
    "body": "@implements I${1:MyInterface}\n\n\t$0"
  },
  "ASP.NET Core Razor - inherits directive for Razor": {
    "prefix": "rz_inherits",
    "body": "@inherits ${1:MyClassToInheritFrom}\n\n\t$0"
  },
  "ASP.NET Core Razor - inject directive for Razor": {
    "prefix": "rz_inject",
    "body": "@inject I${1:MyInterface} ${2:MyInterface}\n$0"
  },
  "ASP.NET Core Razor - Specifies the model to use for Razor": {
    "prefix": "rz_model",
    "body": "@model ${1:MyModel}\n$0"
  },
  "ASP.NET Core Razor - Specifies the namespace to use for Razor": {
    "prefix": "rz_namespace",
    "body": "@namespace ${1:MyNamespace}\n$0"
  },
  "ASP.NET Core Razor - HTML markup for Razor": {
    "prefix": "rz_raw",
    "body": "@Html.Raw(\"<${1:span}>${2:Hello World}</$1>\")"
  },
  "ASP.NET Core Razor - RenderBody for Razor": {
    "prefix": "rz_renderbody",
    "body": "@RenderBody()"
  },
  "ASP.NET Core Razor - switch statement for Razor": {
    "prefix": "rz_switch",
    "body": "@switch (${1:value})\n{\n\tcase ${2:value1}:\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n}\n$0"
  },
  "ASP.NET Core Razor - try catch finally for Razor": {
    "prefix": "rz_try",
    "body": "@try\n{\n\t$0\n}\ncatch (${1:Exception} ${2:ex})\n{\n\t<${3:p}>Error: @$2.Message</$3>\n}\nfinally\n{\n\t\n}"
  },
  "ASP.NET Core Razor - using statement for Razor": {
    "prefix": "rz_using",
    "body": "@using (${1:Html.BeginForm()})\n{\t$0\n}"
  },
  "ASP.NET Core Razor - ViewBag for Razor": {
    "prefix": "rz_viewbag",
    "body": "@ViewBag.${1:MyViewBagName}\n$0"
  },
  "ASP.NET Core Razor - ViewData for Razor": {
    "prefix": "rz_viewdata",
    "body": "@ViewData[\"${1:myViewData}\"]\n$0"
  },
  "ASP.NET Core Razor": {
    "prefix": "rz_while",
    "body": "@{ var ${1:flag} = ${2:true}; }\n@while ($1)\n{\n\t$0\n\t$1 = ${3:false};\n}"
  },
  ".NET Core - MS-Test class": {
    "prefix": "mstest",
    "body": "using Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System;\n\nnamespace ${1:ProjectNamespace}.Test\n{\n\t[TestClass]\n\tpublic class ${2:ClassName}Test\n\t{\n\t\t[TestMethod]\n\t\tpublic void ${3:MethodName}()\n\t\t{\n\t\t\t\n\t\t}\n\t}\n}"
  },
  "gRPC .Net 5 - Creates csproj for the Client": {
    "prefix": "gRPC_client_csproj",
    "body": [
      "<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n",
      "\t<PropertyGroup>",
      "\t\t<TargetFramework>net5.0</TargetFramework>",
      "\t</PropertyGroup>\n",
      "\t<ItemGroup>",
      "\t\t<Protobuf Include=\"..\\Proto\\greet.proto\" GrpcServices=\"Client\" Link=\"Protos\\greet.proto\" />\n",
      "\t\t<PackageReference Include=\"Google.Protobuf\" Version=\"3.13.0\" />",
      "\t\t<PackageReference Include=\"Grpc.Net.Client\" Version=\"2.33.1\" />",
      "\t\t<PackageReference Include=\"Grpc.Tools\" Version=\"2.33.1\" PrivateAssets=\"All\" />",
      "\t</ItemGroup>\n",
      "</Project>"
    ]
  },
  "gRPC .Net 5 - Program class for a simple Client": {
    "prefix": "gRPC_client_program",
    "body": [
      "using Greet;",
      "using Grpc.Net.Client;",
      "using System;",
      "using System.Threading.Tasks;\n",
      "namespace Client",
      "{",
      "\tpublic class Program",
      "\t{",
      "\t\tpublic static async Task Main(string[] args)",
      "\t\t{",
      "\t\t\ttry",
      "\t\t\t{",
      "\t\t\t\tusing var channel = GrpcChannel.ForAddress(\"http://localhost:5000\");",
      "\t\t\t\tvar client = new Greeter.GreeterClient(channel);\n",
      "\t\t\t\tvar reply = await client.SayHelloAsync(new HelloRequest { Name = \"GreeterClient\" });",
      "\t\t\t\tConsole.WriteLine(\"Greeting: \" + reply.Message);",
      "\t\t\t}",
      "\t\t\tcatch (Exception ex)",
      "\t\t\t{",
      "\t\t\t\tConsole.WriteLine($\"ERROR: {ex.Message}\");",
      "\t\t\t}\n",
      "\t\t\tConsole.WriteLine(\"Shutting down\");",
      "\t\t\tConsole.WriteLine(\"Press any key to exit...\");",
      "\t\t\tConsole.ReadKey();",
      "\t\t}",
      "\t}\n"
    ]
  },
  "gRPC .Net 5 - Proto sample file for the App": {
    "prefix": "gRPC_proto",
    "body": [
      "// Create a Proto folder and keep there this greet.proto file",
      "syntax = \"proto3\";\n",
      "package greet;\n",
      "// Greeting service definition",
      "service Greeter {",
      "\t// Sends a greeting",
      "\trpc SayHello (HelloRequest) returns (HelloReply);",
      "}\n",
      "// The request message containing the user's name",
      "message HelloRequest {",
      "\tstring name = 1;",
      "}\n",
      "// The response message containing the greetings",
      "message HelloReply {",
      "\tstring message = 1;\n}"
    ]
  },
  "gRPC .Net 5 - Creates csproj": {
    "prefix": "gRPC_server_csproj",
    "body": [
      "<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n",
      "\t<PropertyGroup>",
      "\t\t<TargetFramework>net5.0</TargetFramework>",
      "\t</PropertyGroup>\n",
      "\t<ItemGroup>",
      "\t\t<Protobuf Include=\"..\\Proto\\greet.proto\" GrpcServices=\"Server\" Link=\"Protos\\greet.proto\" />\n",
      "\t\t<PackageReference Include=\"Grpc.AspNetCore\" Version=\"2.33.1\" />",
      "\t</ItemGroup>\n",
      "</Project>"
    ]
  },
  "gRPC .Net 5 - Program class": {
    "prefix": "gRPC_server_program",
    "body": [
      "using Microsoft.AspNetCore.Hosting;",
      "using Microsoft.Extensions.Hosting;\n",
      "namespace Server",
      "{",
      "\tpublic class Program",
      "\t{",
      "\t\tpublic static void Main(string[] args)",
      "\t\t{",
      "\t\t\tCreateHostBuilder(args).Build().Run();",
      "\t\t}\n",
      "\t\tpublic static IHostBuilder CreateHostBuilder(string[] args) =>",
      "\t\t\tHost.CreateDefaultBuilder(args)",
      "\t\t\t\t.ConfigureWebHostDefaults(webBuilder =>",
      "\t\t\t\t{",
      "\t\t\t\t\twebBuilder.UseStartup<Startup>();",
      "\t\t\t\t});",
      "\t}\n}"
    ]
  },
  "gRPC .Net 5 - Service class": {
    "prefix": "gRPC_server_service",
    "body": [
      "using Greet;",
      "using Grpc.Core;",
      "using Microsoft.Extensions.Logging;",
      "using System.Threading.Tasks;\n",
      "namespace Server",
      "{",
      "\tpublic class GreeterService : Greeter.GreeterBase",
      "\t{",
      "\t\tprivate readonly ILogger _logger;\n",
      "\t\tpublic GreeterService(ILoggerFactory loggerFactory)",
      "\t\t{",
      "\t\t\t_logger = loggerFactory.CreateLogger<GreeterService>();",
      "\t\t}\n",
      "\t\tpublic override Task<HelloReply> SayHello(HelloRequest request, ServerCallContext context)",
      "\t\t{",
      "\t\t\t_logger.LogInformation($\"Sending hello to {request.Name}\");",
      "\t\t\treturn Task.FromResult(new HelloReply { Message = \"Hello \" + request.Name });",
      "\t\t}",
      "\t}\n"
    ]
  },
  "gRPC .Net 5 - Settings (appsettings.json) content": {
    "prefix": "gRPC_server_settings",
    "body": "{\n\t\"Logging\": {\n\t\t\"LogLevel\": {\n\t\t\t\"Default\": \"Information\"\n\t\t}\n\t},\n\t\"AllowedHosts\": \"*\",\n\t\"Kestrel\": {\n\t\t\"EndpointDefaults\": {\n\t\t\t\"Protocols\": \"Http2\"\n\t\t}\n\t}\n}"
  },
  "gRPC .Net 5 - Startup class": {
    "prefix": "gRPC_server_startup",
    "body": [
      "using Microsoft.AspNetCore.Builder;",
      "using Microsoft.AspNetCore.Hosting;",
      "using Microsoft.Extensions.DependencyInjection;",
      "using Microsoft.Extensions.Hosting;\n",
      "namespace Server\n{",
      "\tpublic class Startup\n\t{",
      "\t\tpublic void ConfigureServices(IServiceCollection services)\n\t\t{",
      "\t\t\tservices.AddGrpc();\n\t\t}\n",
      "\t\tpublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)",
      "\t\t{",
      "\t\t\tif (env.IsDevelopment())",
      "\t\t\t{",
      "\t\t\t\tapp.UseDeveloperExceptionPage();\n\t\t\t}\n",
      "\t\t\tapp.UseRouting();\n",
      "\t\t\tapp.UseEndpoints(endpoints =>\n\t\t\t{",
      "\t\t\t\tendpoints.MapGrpcService<GreeterService>();\n\t\t\t});\n\t\t}\n\t}\n}"
    ]
  },
  "Extension for get the MD5 value from a stream": {
    "prefix": "ex_md5_from_stream",
    "body": "public static string GetMD5(this System.IO.Stream stream)\n{\n\tstream.Position = 0;\n\tvar arrayByteHashValue = new System.Security.Cryptography.MD5CryptoServiceProvider().ComputeHash(stream);\n\treturn BitConverter.ToString(arrayByteHashValue).Replace(\"-\", String.Empty).ToLower();\n}"
  },
  "Extension for convert a stream to string": {
    "prefix": "ex_stream_to_string",
    "body": "public static string ToString(this System.IO.Stream stream)\n{\n\tstream.Position = 0;\n\treturn new System.IO.StreamReader(stream).ReadToEnd();\n}"
  },
  "Extension for convert a string to stream": {
    "prefix": "ex_string_to_stream",
    "body": "public static System.IO.Stream ConvertToStream(this string source)\n{\n\tvar byteArray = System.Text.Encoding.UTF8.GetBytes(source);\n\treturn new System.IO.MemoryStream(byteArray);\n}"
  }
}
